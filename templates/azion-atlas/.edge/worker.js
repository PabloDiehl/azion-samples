var h=({base:s="",routes:t=[]}={})=>({__proto__:new Proxy({},{get:(e,n,r,o)=>(a,...c)=>t.push([n.toUpperCase(),RegExp(`^${(o=(s+a).replace(/\/+(\/|$)/g,"$1")).replace(/(\/?\.?):(\w+)\+/g,"($1(?<$2>*))").replace(/(\/?\.?):(\w+)/g,"($1(?<$2>[^$1/]+?))").replace(/\./g,"\\.").replace(/(\/?)\*/g,"($1.*)?")}/*$`),c,o])&&r}),routes:t,async handle(e,...n){let r,o,a=new URL(e.url),c=e.query={__proto__:null};for(let[i,d]of a.searchParams)c[i]=c[i]===void 0?d:[c[i],d].flat();for(let[i,d,j,O]of t)if((i===e.method||i==="ALL")&&(o=a.pathname.match(d))){e.params=o.groups||{},e.route=O;for(let b of j)if((r=await b(e.proxy||e,...n))!==void 0)return r}}});var u=(s="text/plain; charset=utf-8",t)=>(e,n)=>{let{headers:r={},...o}=n||{};return e?.constructor.name==="Response"?e:new Response(t?t(e):e,{headers:{"content-type":s,...r},...o})},U=u("application/json; charset=utf-8",JSON.stringify);var C=u("text/plain; charset=utf-8",String),N=u("text/html"),T=u("image/jpeg"),P=u("image/png"),$=u("image/webp");var l=class{constructor(t,e){this.headers={"Content-Type":"application/json","Access-Control-Request-Headers":"*","api-key":t},this.url=e,this.body={collection:"users",database:"azion",dataSource:"Cluster0"}}};var p=class extends l{constructor(t,e){super(t,e)}async find(){let t=this.body;try{let n=await(await fetch(`${this.url}/find`,{method:"POST",body:JSON.stringify(t),headers:this.headers})).json();return JSON.stringify(n.documents)}catch(e){throw e}}async insertOne(t){let e={...this.body,document:t};try{return await(await fetch(`${this.url}/insertOne`,{method:"POST",body:JSON.stringify(e),headers:this.headers})).json()}catch(n){throw n}}async updateOne(t,e){let n={...this.body,filter:{_id:{$oid:e}},update:{$set:{...t}}};try{return await(await fetch(`${this.url}/updateOne`,{method:"POST",body:JSON.stringify(n),headers:this.headers})).json()}catch(r){throw r}}async deleteOne(t){let e={...this.body,filter:{_id:{$oid:t}}};try{return await(await fetch(`${this.url}/deleteOne`,{method:"POST",body:JSON.stringify(e),headers:this.headers})).json()}catch(n){throw n}}};var y=async(s,t)=>{let{args:e}=t,{token:n,url:r}=e?.API_TOKEN,a=await new p(n,r).find();return new Response(a,{headers:{"content-type":"application/json;charset=UTF-8"},status:200})},g=async(s,t)=>{let{args:e}=t,{token:n,url:r}=e?.API_TOKEN,o=new p(n,r),a=await s.json(),{insertedId:c}=await o.insertOne(a);return c?new Response(JSON.stringify({message:"success",data:{insertedId:c}}),{headers:{"content-type":"application/json;charset=UTF-8"},status:200}):new Response(JSON.stringify({message:"failed to create user"}),{headers:{"content-type":"application/json;charset=UTF-8"},status:400})},f=async(s,t)=>{let{args:e}=t,{token:n,url:r}=e?.API_TOKEN,o=new p(n,r),a=await s.json(),{id:c,...i}=a,{modifiedCount:d}=await o.updateOne(i,c);return d===0?new Response(JSON.stringify({message:"user not found"}),{headers:{"content-type":"application/json;charset=UTF-8"},status:400}):new Response(JSON.stringify({message:"success",data:{modifiedCount:d}}),{headers:{"content-type":"application/json;charset=UTF-8"},status:200})},w=async(s,t)=>{let{args:e}=t,{token:n,url:r}=e?.API_TOKEN,o=new p(n,r),a=await s.json(),{id:c}=a,{deletedCount:i}=await o.deleteOne(c);return i===0?new Response(JSON.stringify({message:"user not found"}),{headers:{"content-type":"application/json;charset=UTF-8"},status:400}):new Response(JSON.stringify({message:"success"}),{headers:{"content-type":"application/json;charset=UTF-8"},status:200})};async function S(s,t){let e=h();return e.get("/api",y).post("/api",g).put("/api",f).delete("/api",w),e.handle(s,{args:t})}var m=S;async function x(s){return m(s?.request,s?.args)}async function R(s){try{return x(s)}catch(t){return new Response(t.message||t.toString(),{status:500})}}async function A(s){return R(s)}addEventListener("fetch",s=>{s.respondWith(A(s))});
